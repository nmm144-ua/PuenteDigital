// Diagn√≥stico y Soluci√≥n de Conexiones WebRTC
// A√±ade este archivo como src/services/connection-diagnostic.js

import socketService from './socket.service';
import webrtcService from './webrtc.service';
import router from '../router'; // Ajusta la ruta seg√∫n tu estructura de proyecto

class ConnectionDiagnostic {
  constructor() {
    this.debug = true;
    this.connectionAttempts = {};
    this.callRequests = new Set();
    this._initialized = false;
    this.navigating = false;
  }

  // Funci√≥n para logs
  log(message, ...args) {
    if (this.debug) {
      console.log(`[Diagnostic] ${message}`, ...args);
    }
  }

  // Funci√≥n para logs de error
  logError(message, error) {
    console.error(`[Diagnostic ERROR] ${message}`, error);
  }

  // Inicializar diagn√≥stico y escuchar eventos de conexi√≥n
  init() {
    if (this._initialized) return;
    
    this.log('üîç Inicializando diagn√≥stico de conexiones');
    
    // Sobrescribir temporalmente m√©todos para obtener m√°s informaci√≥n
    this._patchSocketService();
    this._patchWebRTCService();
    
    // Escuchar eventos de socket
    this._setupSocketListeners();
    
    this._initialized = true;
  }

  // Escuchar eventos espec√≠ficos de socket para diagn√≥stico
  _setupSocketListeners() {
    // Evento de usuario que se une a la sala
    socketService.on('user-joined', (data) => {
      this.log('üë§ Usuario unido a la sala', data);
      
      // Si es un usuario m√≥vil, mostrar informaci√≥n detallada
      if (data.userAgent && this._isMobileUserAgent(data.userAgent)) {
        this.log('üì± Detectado usuario desde dispositivo m√≥vil', data);
      }
    });

    // Escuchar solicitudes de llamada
    socketService.on('call-requested', (data) => {
      this.log('üìû Solicitud de llamada recibida', data);
      this.callRequests.add(data.from || data.userId);
      
      // Verificar si debemos navegar al componente de videollamada
      this._checkVideoCallNavigation(data);
    });

    // Escuchar ofertas WebRTC
    socketService.on('offer', (data) => {
      this.log('üîÑ Oferta WebRTC recibida', data);
      
      // Si hemos recibido una oferta pero no hay solicitud de llamada previa,
      // podr√≠a indicar un problema de sincronizaci√≥n
      const fromUserId = data.from || data.userId;
      if (fromUserId && !this.callRequests.has(fromUserId)) {
        this.log('‚ö†Ô∏è Recibida oferta sin solicitud de llamada previa, a√±adiendo manualmente');
        this.callRequests.add(fromUserId);
        this._checkVideoCallNavigation({
          from: fromUserId,
          roomId: data.roomId || socketService.roomId
        });
      }
    });
    
    // Evento de reconexi√≥n
    socketService.on('reconnect', () => {
      this.log('üîå Socket reconectado, comprobando llamadas pendientes');
      this._checkPendingCalls();
    });
  }

  // Verificar si debemos navegar al componente de videollamada
  _checkVideoCallNavigation(data) {
    // Logging detallado para depuraci√≥n
    this.log('üß≠ Intentando navegar a videollamada', {
      data,
      currentRoute: router.currentRoute.value.path,
      roomId: data.roomId || socketService.roomId,
      fromUserId: data.from || data.userId
    });
  
    // Verificar que no estemos ya navegando
    if (this.navigating) {
      this.log('üîÑ Ya se est√° navegando, ignorando');
      return;
    }
  
    const currentRoute = router.currentRoute.value;
    const fromUserId = data.from || data.userId;
    const roomId = data.roomId || socketService.roomId;
  
    // Condiciones m√°s flexibles para la navegaci√≥n
    if (
      !currentRoute.path.includes('/videollamada') && 
      fromUserId && 
      roomId
    ) {
      this.navigating = true;
      
      this.log('üöÄ Navegando al componente de videollamada', {
        roomId,
        fromUserId,
        currentRoute: currentRoute.path
      });
  
      // Usar try-catch para manejar errores de navegaci√≥n
      router.push({
        path: `/videollamada/${roomId}`,
        query: {
          solicitudId: currentRoute.params.solicitudId || null,
          callerId: fromUserId,
          role: 'usuario'  // Asumo que la app m√≥vil llama como usuario
        }
      }).then(() => {
        this.log('‚úÖ Navegaci√≥n a videollamada completada');
        
        // Reiniciar flag de navegaci√≥n despu√©s de un tiempo
        setTimeout(() => {
          this.navigating = false;
        }, 5000);
      }).catch(error => {
        this.logError('‚ùå Error al navegar a videollamada:', error);
        this.navigating = false;
      });
    }
  }

  // Extraer ID de solicitud desde la ruta
  _extractSolicitudIdFromPath(path) {
    // Intenta extraer el ID de solicitud de la ruta actual
    // Asume formato como /asistente/chat/ABC123 o similar
    const matches = path.match(/\/chat\/([a-zA-Z0-9-_]+)/);
    if (matches && matches[1]) {
      return matches[1];
    }
    return null;
  }

  // Comprobar llamadas pendientes despu√©s de una reconexi√≥n
  _checkPendingCalls() {
    if (this.callRequests.size > 0) {
      this.log('üìû Hay llamadas pendientes despu√©s de reconexi√≥n', [...this.callRequests]);
      
      // Tomar la √∫ltima solicitud de llamada
      const lastCallerId = Array.from(this.callRequests).pop();
      
      // Verificar navegaci√≥n a videollamada
      this._checkVideoCallNavigation({
        from: lastCallerId,
        roomId: socketService.roomId
      });
    }
  }

  // Sobrescribir temporalmente m√©todos de Socket.IO para diagn√≥stico
  _patchSocketService() {
    // Guardar referencia al m√©todo original
    const originalJoinRoom = socketService.joinRoom;
    
    // Sobrescribir joinRoom para a√±adir informaci√≥n adicional
    socketService.joinRoom = (roomId, userId, userName, metadata = {}) => {
      // A√±adir informaci√≥n del dispositivo para mejor diagn√≥stico
      const enhancedMetadata = {
        ...metadata,
        deviceInfo: this._getDeviceInfo(),
        timestamp: new Date().toISOString()
      };
      
      this.log('üîÑ Uniendo a sala con metadata mejorada', {
        roomId, userId, userName, metadata: enhancedMetadata
      });
      
      // Llamar al m√©todo original con metadata mejorada
      return originalJoinRoom.call(socketService, roomId, userId, userName, enhancedMetadata);
    };
  }

  // Sobrescribir temporalmente m√©todos de WebRTC para diagn√≥stico
  _patchWebRTCService() {
    // Guardar referencia al m√©todo original
    const originalHandleIncomingOffer = webrtcService.handleIncomingOffer;
    
    // Sobrescribir handleIncomingOffer para a√±adir m√°s diagn√≥stico
    webrtcService.handleIncomingOffer = async (offer, fromUserId) => {
      this.log('üîÑ Manejando oferta entrante con datos mejorados', {
        fromUserId,
        hasLocalStream: !!webrtcService.localStream,
        offerType: offer?.type,
        hasSDP: !!offer?.sdp,
        sdpLength: offer?.sdp?.length
      });
      
      // Registrar esta oferta para diagn√≥stico
      this.callRequests.add(fromUserId);
      
      // Comprobar navegaci√≥n al componente de videollamada
      this._checkVideoCallNavigation({
        from: fromUserId,
        roomId: socketService.roomId
      });
      
      try {
        // Llamar al m√©todo original
        return await originalHandleIncomingOffer.call(webrtcService, offer, fromUserId);
      } catch (error) {
        this.logError('‚ùå Error manejando oferta entrante:', error);
        // Reintentar la conexi√≥n despu√©s de un error
        this._scheduleReconnect(fromUserId);
        throw error;
      }
    };
  }

  // Programar un reintento de conexi√≥n
  _scheduleReconnect(userId) {
    if (!userId) return;
    
    // Incrementar contador de intentos
    this.connectionAttempts[userId] = (this.connectionAttempts[userId] || 0) + 1;
    
    // Limitar n√∫mero de intentos
    if (this.connectionAttempts[userId] > 3) {
      this.log('‚ö†Ô∏è Demasiados intentos de reconexi√≥n para', userId);
      return;
    }
    
    // Calcular retraso exponencial
    const delay = Math.min(1000 * Math.pow(2, this.connectionAttempts[userId] - 1), 10000);
    
    this.log(`‚è±Ô∏è Programando reconexi√≥n en ${delay}ms para`, userId);
    
    setTimeout(() => {
      this.log('üîÑ Intentando reconexi√≥n con', userId);
      
      // Si tenemos RoomId, intentar reiniciar toda la conexi√≥n
      if (socketService.roomId) {
        webrtcService.restartConnection(userId)
          .then(() => {
            this.log('‚úÖ Reconexi√≥n exitosa con', userId);
          })
          .catch(error => {
            this.logError('‚ùå Error en reconexi√≥n con ' + userId + ':', error);
          });
      }
    }, delay);
  }

  // Obtener informaci√≥n del dispositivo actual para diagn√≥stico
  _getDeviceInfo() {
    return {
      userAgent: navigator.userAgent,
      platform: navigator.platform,
      vendor: navigator.vendor,
      language: navigator.language,
      screenSize: {
        width: window.screen.width,
        height: window.screen.height
      },
      viewport: {
        width: window.innerWidth,
        height: window.innerHeight
      },
      devicePixelRatio: window.devicePixelRatio
    };
  }

  // Detectar si un user agent corresponde a un dispositivo m√≥vil
  _isMobileUserAgent(userAgent) {
    if (!userAgent) return false;
    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(userAgent);
  }

  // Detener diagn√≥stico y restablecer m√©todos originales
  dispose() {
    // Aqu√≠ ir√≠a la l√≥gica para revertir los parches y liberar recursos
    this.log('üßπ Limpiando diagn√≥stico de conexiones');
    
    // Eliminar event listeners de socket
    socketService.off('user-joined');
    socketService.off('call-requested');
    socketService.off('offer');
    socketService.off('reconnect');
    
    this._initialized = false;
  }
}

// Exportar una instancia √∫nica
const connectionDiagnostic = new ConnectionDiagnostic();
export default connectionDiagnostic;